#! /usr/bin/env python

# Copyright (c) 2010-2011, Lawrence Livermore National Security, LLC
# Produced at Lawrence Livermore National Laboratory
# LLNL-CODE-462894
# All rights reserved.
#
# This file is part of MixDown. Please read the COPYRIGHT file
# for Our Notice and the LICENSE file for the GNU Lesser General Public
# License.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License (as published by
# the Free Software Foundation) version 3 dated June 2007.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
# conditions of the GNU Lesser General Public License for more details.
#
#  You should have recieved a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import os, sys, tarfile, time, urllib
from md import commands, defines, importer, logger, options, project, utilityFunctions

#--------------------------------Main---------------------------------
def main():
    logger.setLogger("console")
    logger.writeMessage("MixDown - A tool to simplify building\n")
    try:
        succeeded = True
        partialImport = False
        option = options.Options()
        targetsToImport = option.processCommandline(sys.argv)

        if (not option.importer or not targetsToImport) and not\
           option.cleanTargets and option.projectFile == "":
            option.printUsageAndExit("MixDown's mode could not be determined")
        timeStarted = time.time()

        if option.importer:
            projects, partialImport = importer.importTargets(option, targetsToImport)
            if projects == None or partialImport:
                succeeded = False
        else:
            if option.cleanMixDown:
                cleanMixDown(option)
            projects = setup(option)
            if projects == None:
                succeeded = False
            else:
                for target in reversed(projects.targets):
                    if option.cleanTargets:
                        cleanStep = target.findBuildStep("clean")
                        succeeded = commands.buildStepActor(target, cleanStep, option)
                    else:
                        for buildStep in target.buildSteps:
                            if buildStep.name == "clean" or buildStep.command == "":
                                continue
                            succeeded = commands.buildStepActor(target, buildStep, option)
                            if not succeeded:
                                break
                    if not succeeded:
                        break

        timeFinished = time.time()
        timeElapsed = timeFinished - timeStarted

        message = "Project"
        if projects != None:
            message += " " + projects.name

        if not succeeded:
            message += " failed."
        else:
            message += " succeeded."
            if option.importer:
                logger.writeMessage("\nProject " + projects.name + " has been imported to file " + projects.path)
            elif option.cleanTargets:
                logger.writeMessage("\n" + projects.name + " has been cleaned in " + os.path.abspath(option.buildDir))
            else:
                logger.writeMessage("\n" + projects.name + " has been built in " + os.path.abspath(option.buildDir))
                logger.writeMessage(projects.name + " has been installed to " + os.path.abspath(option.getDefine(defines.mdPrefix[0])))
        message = "\nTotal time " + logger.secondsToHMS(timeElapsed) + "\n" + message
        logger.writeMessage(message)
        if partialImport:
            logger.writeError("\nProject partially imported.  Please refer to comments in created MixDown project file to determine reason.")
    finally:
        logger.close()
    if succeeded:
        sys.exit()
    else:
        sys.exit(1)

#--------------------------------Setup---------------------------------
def setup(option):
    logger.setLogger(option.logger, option.logDir)
    if option.verbose:
        logger.writeMessage(str(option))
        if not option.prefixDefined and not option.cleanTargets:
            logger.writeMessage("No prefix defined, defaulting to '" + option.getDefine(defines.mdPrefix[0]) + "'")

    projects = project.Project(option.projectFile)
    if not projects.read():
        return None
    if not projects.addSkipStepFromOptions(option):
        return None

    if not projects.examine(option):
        return None
    if not projects.validate(option):
        return None

    if option.cleanTargets:
        for currTarget in projects.targets:
            currTarget.path = currTarget.determineOutputPath(option)
    else:
        cleaningOutputReported = False
        for currTarget in projects.targets:
            if currTarget.outputPath != "" and os.path.exists(currTarget.outputPath):
                if cleaningOutputReported:
                    logger.writeMessage("Cleaning MixDown and Target output directories...")
                    cleaningOutputReported = True
                utilityFunctions.removeDir(currTarget.outputPath)

        prefixDefine = option.getDefine(defines.mdPrefix[0])
        if prefixDefine != "":
            #TODO: only add lib64 if on 64bit machines
            libraryPaths = os.path.join(prefixDefine, "lib64") + ":" + os.path.join(prefixDefine, "lib")
            if os.environ.has_key("LD_LIBRARY_PATH"):
                originalLibraryPath = str.strip(os.environ["LD_LIBRARY_PATH"])
                if originalLibraryPath != "":
                    libraryPaths += ":" + originalLibraryPath
            os.environ["LD_LIBRARY_PATH"] = libraryPaths

    return projects

def cleanMixDown(option):
    try:
        logger.writeMessage("Cleaning MixDown directories...")
        utilityFunctions.removeDir(option.buildDir)
        utilityFunctions.removeDir(option.downloadDir)
        utilityFunctions.removeDir(option.logDir)
    except IOError, e:
        logger.writeError(e, exitProgram=True)

#----------------------------------------------------------------------

if __name__ == "__main__":
    main()
